#include "pico/stdlib.h"
#include <stdio.h>
#include "hardware/pio.h"
#include "hardware/clocks.h"
#include "hardware/watchdog.h"
#include "./ws2812.pio.h"
#include "buzzer.h"

#define IS_RGBW false
#define NUM_PIXELS 25
#define WS2812_PIN 22

// Pinos do teclado
#define ROW1 5
#define ROW2 6
#define ROW3 7
#define ROW4 8
#define COL1 28
#define COL2 2
#define COL3 3
#define COL4 4

// Estrutura para cor RGB
typedef struct {
    uint8_t r;
    uint8_t g;
    uint8_t b;
} RGB_Color;

// Estado global do PIO
PIO pio;
uint sm;

// Protótipos das funções
static inline void ws2812_program_init(PIO pio, uint sm, uint offset, uint pin, float freq, bool rgbw);
void init_ws2812(void);
void put_pixel(uint32_t pixel_grb);
void set_all_pixels(RGB_Color color);
void clear_pixels(void);
char read_keypad(void);
void animation_2(void);
uint32_t urgb_u32(uint8_t r, uint8_t g, uint8_t b);

static inline void ws2812_program_init(PIO pio, uint sm, uint offset, uint pin, float freq, bool rgbw) {
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    pio_sm_config c = ws2812_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, pin);
    sm_config_set_out_shift(&c, false, true, rgbw ? 32 : 24);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    float div = clock_get_hz(clk_sys) / (freq * 2.5f);
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

int main() {
    stdio_init_all();
    init_ws2812();
    init_buzzer();

    // Configuração dos pinos do teclado
    gpio_init(ROW1); gpio_init(ROW2); gpio_init(ROW3); gpio_init(ROW4);
    gpio_init(COL1); gpio_init(COL2); gpio_init(COL3); gpio_init(COL4);

    gpio_set_dir(ROW1, GPIO_OUT); gpio_set_dir(ROW2, GPIO_OUT);
    gpio_set_dir(ROW3, GPIO_OUT); gpio_set_dir(ROW4, GPIO_OUT);
    gpio_set_dir(COL1, GPIO_IN); gpio_set_dir(COL2, GPIO_IN);
    gpio_set_dir(COL3, GPIO_IN); gpio_set_dir(COL4, GPIO_IN);

    gpio_pull_down(COL1); gpio_pull_down(COL2);
    gpio_pull_down(COL3); gpio_pull_down(COL4);

    while (1) {
        char key = read_keypad();
        if (key != 0) {
            printf("Tecla: %c\n", key);

            switch (key) {
                case '1':
                    animation_2();
                    break;
                case 'A':
                    clear_pixels(); // Desliga todos
                    break;
                case 'B':
                    set_all_pixels((RGB_Color){0, 0, 255}); // Azul 100%
                    break;
                case 'C':
                    set_all_pixels((RGB_Color){204, 0, 0}); // Vermelho 80%
                    break;
                case 'D':
                    set_all_pixels((RGB_Color){0, 128, 0}); // Verde 50%
                    break;
                case '#':
                    set_all_pixels((RGB_Color){51, 51, 51}); // Branco 20%
                    break;
                case '*':
                    watchdog_enable(1, 1);
                    while(1);
                    break;
            }
        }
        sleep_ms(100);
    }
}

void init_ws2812() {
    pio = pio0;
    uint offset = pio_add_program(pio, &ws2812_program);
    sm = pio_claim_unused_sm(pio, true);
    ws2812_program_init(pio, sm, offset, WS2812_PIN, 800000, IS_RGBW);
}

void put_pixel(uint32_t pixel_grb) {
    pio_sm_put_blocking(pio, sm, pixel_grb << 8u);
}

uint32_t urgb_u32(uint8_t r, uint8_t g, uint8_t b) {
    return ((uint32_t)(g) << 16) |
           ((uint32_t)(r) << 8) |
           (uint32_t)(b);
}

void set_all_pixels(RGB_Color color) {
    uint32_t rgb = urgb_u32(color.r, color.g, color.b);
    for (int i = 0; i < NUM_PIXELS; i++) {
        put_pixel(rgb);
    }
}

void clear_pixels() {
    set_all_pixels((RGB_Color){0, 0, 0});
}

char read_keypad() {
    const char keys[4][4] = {
        {'1', '2', '3', 'A'},
        {'4', '5', '6', 'B'},
        {'7', '8', '9', 'C'},
        {'*', '0', '#', 'D'}
    };

    for (int row = 0; row < 4; row++) {
        gpio_put(ROW1, row == 0);
        gpio_put(ROW2, row == 1);
        gpio_put(ROW3, row == 2);
        gpio_put(ROW4, row == 3);

        sleep_us(100);

        if (gpio_get(COL1)) return keys[row][0];
        if (gpio_get(COL2)) return keys[row][1];
        if (gpio_get(COL3)) return keys[row][2];
        if (gpio_get(COL4)) return keys[row][3];
    }
    return 0;
}

void animation_2() {
    const int FPS = 15;
    const int frame_delay = 1000 / FPS;

    RGB_Color cores[] = {
        {255, 0, 0},    // Vermelho
        {0, 255, 0},    // Verde
        {0, 0, 255},    // Azul
    };
    const int num_cores = 3;

    for (int frame = 0; frame < 15; frame++) {
        for (int i = 0; i < NUM_PIXELS; i++) {
            RGB_Color cor = cores[(frame + i) % num_cores];
            put_pixel(urgb_u32(cor.r, cor.g, cor.b));
        }
        sleep_ms(frame_delay);
    }

    clear_pixels();
}
